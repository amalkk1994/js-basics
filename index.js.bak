/*

let palindromeNonPalindrome = "Abc Mom Hello Madam Dad xyz";
function getLongestPalindrome(palindromeNonPalindrome) {
// return longest palindrome along with its length
}

*/

function getLongestPalindrome(palindromeNonPalindrome) {
  const words = palindromeNonPalindrome.split(" ");

  // console.log(words);

  const palindromes = words.filter((word) => {
    //console.log(word.split("").reverse().join("").toLowerCase());
    if (
      word.split("").reverse().join("").toLowerCase() === word.toLowerCase()
    ) {
      // console.log(word.split("").reverse().join(""));
      return true;
    }
  });

  console.log(palindromes);

  const large = palindromes.sort((a, b) => {
    return b.length - a.length;
  })[0];
  console.log(large);
}

palindromeNonPalindrome = "Abc Mom Hello Madam Dad xyz";
getLongestPalindrome(palindromeNonPalindrome);

/*
let value1 = "hi";

let string = `hello ${value1}`;

function a(name, args = 10) {}

const obj = { name, ...person };
*/

// 1. weak map and map
//pgm

// 2. object literal and template literal
//pgm

// 3. what kind of data binding we use in react
//In short, Angular uses two-way (bi-directional) - in angular both UI and state changes.
//data binding while React uses one-way (unidirectional) data binding computations - based on state change
// UI is re rendered.

// 4. how to create custom hooks in react
// A custom Hook is a JavaScript function whose name starts with ”use” and that may call other Hooks.
/*
Do two components using the same Hook share state? No. Custom Hooks are
 a mechanism to reuse stateful logic (such as setting up a subscription and remembering 
  the current value), but every time you use a custom Hook, 
all state and effects inside of it are fully isolated.

*/

// 5. deep copy and shallow copy.
//pgm

// 6. ES6

// 7. immutable js

// 8. prototype in js
// Prototypes are the mechanism by which JavaScript objects inherit features from one another..
// Every object in JavaScript has a built-in property, which is called its prototype.
// The prototype is itself an object, so the prototype will have its own prototype,
//making what's called a prototype chain. The chain ends when we reach a prototype
//that has null for its own prototype.

/*
When you try to access a property of an object: if the property can't be found in the object itself, 
the prototype is searched for the property.
If the property still can't be found, then the prototype's prototype is searched, and so on
 until either the property is found, or the end of the chain is reached, in which case undefined is returned.

This is called "shadowing" the property. - system will perform check on the object first
and then only will look into the prototype, so if define same property, the original 
property will be shdowed
 */

// 9. mutable vs immutable
// all reference types, arrays, objects are mutable
// all primitive types are immutable
// for immutable only values can be reassigend, new property cannot be added
// modification of the assignment will change the original in reference

// 10. how access parameters of an url using react.

/*
In our React app sometimes we want to access the parameters of the current route in this case useParams hook comes into action. The react-router-dom package has useParams hooks that let you access the parameters of the current route.

*/

//chrome://flags/ -> search for dark mode and enable

